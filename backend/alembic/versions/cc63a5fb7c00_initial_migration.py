"""Initial migration

Revision ID: cc63a5fb7c00
Revises: 
Create Date: 2025-10-18 22:07:34.677955

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'cc63a5fb7c00'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('system_logs',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=True),
    sa.Column('event', sa.String(length=255), nullable=False),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('password_hash', sa.Text(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'EMPLOYER', 'CANDIDATE', name='userrole'), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_table('candidates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=False),
    sa.Column('city', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('citizenship', sa.String(length=255), nullable=True),
    sa.Column('birth_date', sa.Date(), nullable=True),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('email', sa.String(length=255), nullable=True),
    sa.Column('expected_salary', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('employment_type', sa.Enum('FULL_TIME', 'PART_TIME', 'REMOTE', 'HYBRID', 'INTERNSHIP', name='employmenttype'), nullable=True),
    sa.Column('summary', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('employers',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('company_name', sa.String(length=255), nullable=False),
    sa.Column('industry', sa.String(length=255), nullable=True),
    sa.Column('location', sa.String(length=255), nullable=True),
    sa.Column('website', sa.Text(), nullable=True),
    sa.Column('verified', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_achievements',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('organization', sa.String(length=255), nullable=True),
    sa.Column('date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_educations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('institution', sa.String(length=255), nullable=False),
    sa.Column('degree', sa.String(length=255), nullable=False),
    sa.Column('field_of_study', sa.String(length=255), nullable=True),
    sa.Column('start_year', sa.Integer(), nullable=False),
    sa.Column('end_year', sa.Integer(), nullable=True),
    sa.Column('is_current', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_experiences',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('company_name', sa.String(length=255), nullable=False),
    sa.Column('position', sa.String(length=255), nullable=False),
    sa.Column('industry', sa.String(length=255), nullable=True),
    sa.Column('start_date', sa.Date(), nullable=False),
    sa.Column('end_date', sa.Date(), nullable=True),
    sa.Column('responsibilities', sa.Text(), nullable=True),
    sa.Column('achievements', sa.Text(), nullable=True),
    sa.Column('technologies', sa.ARRAY(sa.String()), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_languages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('language', sa.String(length=50), nullable=False),
    sa.Column('level', sa.String(length=20), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_links',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.String(length=50), nullable=False),
    sa.Column('url', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('candidate_skills',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('skill_name', sa.String(length=100), nullable=False),
    sa.Column('skill_level', sa.Integer(), nullable=True),
    sa.Column('category', sa.String(length=50), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resumes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('resume_text', sa.Text(), nullable=True),
    sa.Column('file_url', sa.Text(), nullable=True),
    sa.Column('parsed_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('vacancies',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('employer_id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('department', sa.String(length=255), nullable=True),
    sa.Column('company_name', sa.String(length=255), nullable=False),
    sa.Column('industry', sa.String(length=255), nullable=True),
    sa.Column('city', sa.String(length=255), nullable=True),
    sa.Column('region', sa.String(length=255), nullable=True),
    sa.Column('country', sa.String(length=255), nullable=True),
    sa.Column('experience_min', sa.Float(), nullable=True),
    sa.Column('experience_max', sa.Float(), nullable=True),
    sa.Column('employment_type', sa.Enum('FULL_TIME', 'PART_TIME', 'INTERNSHIP', 'CONTRACT', name='vacancyemploymenttype'), nullable=True),
    sa.Column('work_schedule', sa.Enum('FULL_DAY', 'SHIFT', 'REMOTE', 'HYBRID', 'FLEXIBLE', name='workschedule'), nullable=True),
    sa.Column('education_level', sa.String(length=255), nullable=True),
    sa.Column('required_languages', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('required_skills', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('salary_min', sa.Integer(), nullable=True),
    sa.Column('salary_max', sa.Integer(), nullable=True),
    sa.Column('currency', sa.String(length=10), nullable=True),
    sa.Column('responsibilities', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('requirements', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('conditions', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('benefits', sa.ARRAY(sa.String()), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_url', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['employer_id'], ['employers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('interviews',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('vacancy_id', sa.UUID(), nullable=False),
    sa.Column('candidate_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'IN_PROGRESS', 'COMPLETED', 'SCORED', name='interviewstatus'), nullable=True),
    sa.Column('current_stage', sa.Enum('RESUME_FIT', 'HARD_SKILLS', 'SOFT_SKILLS', 'FINISHED', name='interviewstage'), nullable=True),
    sa.Column('ai_version', sa.String(length=50), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('ended_at', sa.DateTime(), nullable=True),
    sa.Column('final_score', sa.Float(), nullable=True),
    sa.Column('summary_json', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['candidate_id'], ['candidates.id'], ),
    sa.ForeignKeyConstraint(['vacancy_id'], ['vacancies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('evaluation_scores',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('interview_id', sa.UUID(), nullable=False),
    sa.Column('category', sa.Enum('RESUME_FIT', 'HARD_SKILLS', 'SOFT_SKILLS', name='evaluationcategory'), nullable=False),
    sa.Column('score', sa.Float(), nullable=False),
    sa.Column('weight', sa.Float(), nullable=False),
    sa.Column('explanation', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('evaluation_summary',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('interview_id', sa.UUID(), nullable=False),
    sa.Column('overall_score', sa.Float(), nullable=False),
    sa.Column('breakdown', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('ai_confidence', sa.Float(), nullable=True),
    sa.Column('generated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('interview_messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('interview_id', sa.UUID(), nullable=False),
    sa.Column('sender', sa.Enum('BOT', 'CANDIDATE', name='messagesender'), nullable=False),
    sa.Column('stage', sa.Enum('RESUME_FIT', 'HARD_SKILLS', 'SOFT_SKILLS', 'FINISHED', name='interviewstage'), nullable=False),
    sa.Column('message_type', sa.Enum('QUESTION', 'ANSWER', 'INFO', name='messagetype'), nullable=False),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('ai_generated', sa.Boolean(), nullable=True),
    sa.Column('score_impact', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['interview_id'], ['interviews.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('interview_messages')
    op.drop_table('evaluation_summary')
    op.drop_table('evaluation_scores')
    op.drop_table('interviews')
    op.drop_table('vacancies')
    op.drop_table('resumes')
    op.drop_table('candidate_skills')
    op.drop_table('candidate_links')
    op.drop_table('candidate_languages')
    op.drop_table('candidate_experiences')
    op.drop_table('candidate_educations')
    op.drop_table('candidate_achievements')
    op.drop_table('employers')
    op.drop_table('candidates')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_table('system_logs')
    # ### end Alembic commands ###
